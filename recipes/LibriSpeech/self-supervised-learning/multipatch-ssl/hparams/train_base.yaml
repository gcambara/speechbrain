# ################################
# Model: Patchies BASE (pretraining)
# Authors: Guillermo Cámbara 2021
# ################################

# Seed needs to be set at top of yaml, before objects with parameters are made
seed: 1993
__set_seed: !!python/object/apply:torch.manual_seed [!ref <seed>]
output_folder: !ref results/wav2vec2_pretraining/<seed>
save_folder: !ref <output_folder>/save
train_log: !ref <output_folder>/train_log.txt
use_tensorboard: True
tensorboard_logs: !ref <output_folder>/logs/

# Data files
data_folder: /datasets/TALN/speech/eng/librispeech/audio/LibriSpeech # e,g./path/to/LibriSpeech
# noise/ris dataset will automatically be downloaded
data_folder_rirs: !ref <data_folder>
# train_splits: ["train-clean-100", "train-clean-360", "train-other-500"]
# dev_splits: ["dev-clean"]
# test_splits: ["test-clean", "test-other"]
train_splits: ["test-clean"]
dev_splits: ["test-clean"]
test_splits: ["test-clean"]
skip_prep: False
ckpt_interval_minutes: 25 # save checkpoint every N min
# train_csv: !ref <output_folder>/train.csv
# valid_csv: !ref <output_folder>/dev-clean.csv
# test_csv:
#    - !ref <output_folder>/test-clean.csv
#    - !ref <output_folder>/test-other.csv
train_csv: !ref <output_folder>/test-clean.csv
valid_csv: !ref <output_folder>/test-clean.csv
test_csv: !ref <output_folder>/test-clean.csv


# We remove utterance slonger than 10s in the train/dev/test sets as
# longer sentences certainly correspond to "open microphones".
avoid_if_longer_than: 30.0
avoid_if_shorter_than: 1.0

# Training parameters
# Parameters are corresponding the the ones reported in the official wav2vec2
# paper (for the masking).
mask_length: 10
mask_prob: 0.065
freeze: False

number_of_epochs: 100
lr: 2.0 # This will get reduced by the training scheduler
warmup: 25000
weight_decay: 0.01
d_model: 768  # Needed by the scheduler. 768 is for the BASE w2v2
sorting: ascending
batch_ordering: !ref <sorting>
auto_mix_prec: False
sample_rate: 16000

# With data_parallel batch_size is split into N jobs
# With DDP batch_size is multiplied by N jobs
# Must be 12 per GPU to fit 32GB of VRAM
# IMPORTANT: To train w2v2 model, we recommand to have the effective batch_size
# higher than 100 (batch_size * nb_gpu * gradient_accumulation)
# Examples are:
# 32 Tesla V100 32GB — 12 * 32 * 1
# 4 Tesla V100 32GB — 12 * 4 * {6-8}

# With dynamic batch size set to 50 seconds (batch size 6-8 aprox.):
# batch size 6 * n_gpus 2 * grad_accum 16 = 192
# 1 epoch = 15858 steps
# 15858 steps / grad accum 16 = 991 steps per epoch
# 991 steps/epoch * 100 epochs = 99113 steps
# 99113 / 10 = 9911 warmup steps
batch_size: 12
batch_seconds: 50.0
test_batch_size: 8
gradient_accumulation: 16

# Dynamic batching for ease of use
dynamic_batching: False

dynamic_batch_sampler:
    max_batch_len: !ref <batch_seconds> # in terms of seconds
    left_bucket_len: 1.0
    multiplier: 1.2
    shuffle_ex: False # re-create batches at each epoch shuffling examples?
    batch_ordering: !ref <batch_ordering>

dont_mask_padding: True
num_workers: 4
train_dataloader_opts:
   batch_size: !ref <batch_size>
   num_workers: !ref <num_workers>

valid_dataloader_opts:
   batch_size: !ref <batch_size>
   num_workers: !ref <num_workers>

test_dataloader_opts:
   batch_size: !ref <test_batch_size>
   num_workers: !ref <num_workers>



#
# Functions and classes
#
epoch_counter: !new:speechbrain.utils.epoch_loop.EpochCounter
    limit: !ref <number_of_epochs>

# contrastive_weight: 1.0
# diversity_weight: 0.1
# latent_l2_weight: 10.0
# wav2vec2_latent_extractor: !new:speechbrain.lobes.models.Wav2Vec2.W2V2LatentExtractor
# wav2vec2_context_extractor: !new:speechbrain.lobes.models.Wav2Vec2.W2V2ContextExtractorBase
# wav2vec2_positional_encoding: !new:speechbrain.lobes.models.Wav2Vec2.W2V2PositionalEncoding
# wav2vec2_feature_masker: !new:speechbrain.lobes.models.Wav2Vec2.W2V2FeatureMasker
#     mask_dim: 768
#     mask_prob: !ref <mask_prob>
#     mask_len: !ref <mask_length>
#     len_sorting: !ref <batch_ordering>
# wav2vec2_vector_quantizer: !new:speechbrain.lobes.models.Wav2Vec2.W2V2Quantizer
# wav2vec2_loss: !new:speechbrain.lobes.models.Wav2Vec2.W2V2Loss
#     contrastive_weight: !ref <contrastive_weight>
#     diversity_weight: !ref <diversity_weight>
#     latent_l2_weight: !ref <latent_l2_weight>

# wav2vec2: !new:speechbrain.lobes.models.Wav2Vec2.Wav2Vec2
#     latent_extractor:    !ref <wav2vec2_latent_extractor>
#     context_extractor:   !ref <wav2vec2_context_extractor>
#     positional_encoding: !ref <wav2vec2_positional_encoding>
#     vector_quantizer:    !ref <wav2vec2_vector_quantizer>
#     feat_masker:         !ref <wav2vec2_feature_masker>
#     loss:                !ref <wav2vec2_loss>

patchies: !new:speechbrain.lobes.models.patchies.Patchies

activation: !name:torch.nn.LeakyReLU
dnn_layers: 2
dnn_neurons: 1024

# enc: !new:speechbrain.lobes.models.VanillaNN.VanillaNN
#    input_shape: [null, null, 1024]
#    activation: !ref <activation>
#    dnn_blocks: !ref <dnn_layers>
#    dnn_neurons: !ref <dnn_neurons>

positional_embedding: !new:speechbrain.lobes.models.patchies.CAPE1d
    d_model: !ref <d_model>
    max_global_shift: 0.0
    max_local_shift: 0.0
    max_global_scaling: 1.0
    normalize: True
    freq_scale: 10.0
    batch_first: True

patcher: !new:speechbrain.lobes.models.patchies.PatchAndPos
    patch_sizes: [[16, 80], [32, 80]]
    patch_strides: [[16, 1], [32, 1]]
    embedding_dim: !ref <d_model>
    feat_stride: 0.01
    positional_embedding: !ref <positional_embedding>

dynamic_distractor_sampling: False
distractors_mask_percentage: 0.5
max_num_negatives: 100

num_negatives: 100
cross_sample_negatives: 0
normalize_wav: True
output_norm: False

latent_grad_weight: 0.1
penalize_latent: True

modules:
    patchies: !ref <patchies>

opt_class: !name:torch.optim.AdamW
    lr: 0 # Will be changed by the scheduler, but we start at 0!
    betas: (0.9, 0.98)
    eps: 0.000000001
    weight_decay: !ref <weight_decay>

noam_annealing: !new:speechbrain.nnet.schedulers.NoamScheduler
    lr_initial: !ref <lr>
    n_warmup_steps: !ref <warmup>
    model_size: !ref <d_model>

checkpointer: !new:speechbrain.utils.checkpoints.Checkpointer
    checkpoints_dir: !ref <save_folder>
    recoverables:
        patchies: !ref <patchies>
        scheduler: !ref <noam_annealing>
        counter: !ref <epoch_counter>

train_logger: !new:speechbrain.utils.train_logger.FileTrainLogger
    save_file: !ref <train_log>
